plot_all_species <- function(comp){
sig_genes <- read.csv(paste("C:/Users/jmcgirr/Documents/Whitehead_Lab/fun/DE/DE_limma_FW_v_transfer/DE_results/",comp,".csv",sep = ""),stringsAsFactors = FALSE, header = TRUE,row.names=NULL)
sig_genes_counts <- t(norm_counts[row.names(norm_counts) %in% sig_genes[1,1],])
counts <- merge(sig_genes_counts, meta, by = "row.names")
counts$gene <- log2(counts[,2])
counts[counts == -Inf]<-0
p1<-ggplot(counts, aes(x=condition, y=gene, col = physiology, fill = species)) +
geom_boxplot(outlier.shape = NA)+
theme_minimal()+
ylab("log2 normalized counts\n")+
scale_color_manual(values=c("black","grey"))+
#scale_fill_manual(values = c(red,pur,blu))+
ggtitle(paste(comp," top DE\n", sig_genes[1,1], sep = ""))
counts <- counts[c("gene","physiology","condition", "clade")]
p2 <- counts %>%
gather(variable, value, -gene) %>%
ggplot(aes(factor(value), gene)) +
geom_boxplot() +
facet_wrap(~variable, scales = "free_x", nrow = 1, strip.position = "bottom") +
theme_minimal()+
ylab("log2 normalized counts\n")+
theme(panel.spacing = unit(0, "lines"),
#panel.border = element_rect(fill = NA),
panel.background = element_rect(fill = NA),
axis.title.x = element_blank(),
legend.position = "none",
strip.placement = "outside")
p <- ggarrange(p1, p2,
labels = c("A", "B"),
ncol = 1, nrow = 2)
print(p)
}
for (comp in comps){
plot_all_species(comp)
}
paste(print("stop gained alleles"),
nrow(stop_gained),
print("start lost alleles"),
nrow(start_lost),
print("stop lost alleles"),
nrow(stop_lost),
print("missense alleles"),
nrow(missense),sep = "")
vep <-read.delim("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/fst/fixed_pws_persite/VEP_output_all_snps.txt", header =FALSE,comment.char = "#")
head(vep)
colnames(vep) <- c("Uploaded_variation","Location","Allele","Gene","Feature","Feature_type","Consequence","cDNA_position","CDS_position","Protein_position","Amino_acids","Codons","Existing_variation","Extra")
unique(vep$Consequence)
stop_gained <- vep[grepl('stop_gained', vep$Consequence), ]
start_lost <- vep[grepl('start_lost', vep$Consequence), ]
stop_lost <- vep[grepl('stop_lost', vep$Consequence), ]
missense <- vep[grepl('missense', vep$Consequence), ]
paste(print("stop gained alleles"),
nrow(stop_gained),
print("start lost alleles"),
nrow(start_lost),
print("stop lost alleles"),
nrow(stop_lost),
print("missense alleles"),
nrow(missense),sep = "")
paste(print("stop gained alleles"),
nrow(stop_gained),
print("start lost alleles"),
nrow(start_lost),
print("stop lost alleles"),
nrow(stop_lost),
print("missense alleles"),
nrow(missense),sep = "")
print(paste("stop gained alleles: ",
nrow(stop_gained),
"start lost alleles: ",
nrow(start_lost),
"stop lost alleles: ",
nrow(stop_lost),
"missense alleles: ",
nrow(missense),sep = ""))
print(paste("stop gained alleles: ",
nrow(stop_gained),
"\nstart lost alleles: ",
nrow(start_lost),
"\nstop lost alleles: ",
nrow(stop_lost),
"\nmissense alleles: ",
nrow(missense),sep = ""))
print(paste("stop gained alleles: ",
nrow(stop_gained),
"\\nstart lost alleles: ",
nrow(start_lost),
"\\nstop lost alleles: ",
nrow(stop_lost),
"\\nmissense alleles: ",
nrow(missense),sep = ""))
print(paste("stop gained alleles: ",
nrow(stop_gained),
"\\n start lost alleles: ",
nrow(start_lost),
"\\n stop lost alleles: ",
nrow(stop_lost),
"\\n missense alleles: ",
nrow(missense),sep = ""))
cat(paste("stop gained alleles: ",
nrow(stop_gained),
"\nstart lost alleles: ",
nrow(start_lost),
"\nstop lost alleles: ",
nrow(stop_lost),
"\nmissense alleles: ",
nrow(missense),sep = ""))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(reticulate)
library(ggpubr)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggspatial)
library(pophelper)
#BiocManager::install("pophelper")
# color-blind friendly
# Wong, B. Points of view: Color blindness. Nat Methods (2011).
bla <- "#000000"
blu <- "#0072b2"
grb <- "#56b4e9"
lir <- "#cc79a7"
gre <- "#009e73"
red <- "#d55e00"
org <- "#e69f00"
yel <- "#f0e442"
gry<-  '#BBBBBB'
pop <- "PWS91"
thetas <-read.delim(paste('C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/thetas/50kb/population_',pop,'_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5_theta.thetas50kbWindow.gz.pestPG',sep = ""))
#thetas$pi<- (thetas$tP*thetas$nSites)/10000
#thetas$pi<- thetas$tP/thetas$nSites
thetas <- thetas[thetas$nSites > 50,]
thetas$pi<- thetas$tP/50000
thetas <- thetas[c("pi")]
names(thetas)[names(thetas)=="pi"] <- pop
for (pop in pop_names){
thetas1 <-read.delim(paste('C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/thetas/50kb/population_',pop,'_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5_theta.thetas50kbWindow.gz.pestPG',sep = ""))
thetas1 <- thetas1[thetas1$nSites > 50,]
thetas1$pi<- thetas1$tP/50000
#thetas1$pi<- thetas1$tP/thetas1$nSites
thetas1[c("Chr","WinCenter","pi")]
thetas$pi <- thetas1$pi
names(thetas)[names(thetas)=="pi"] <- pop
}
my_cols <- c(grb,org,red,red,red,red,yel,yel,yel,blu,blu,blu,blu,lir)
thetas <- na.omit(thetas)
p1 <- thetas %>%
gather(key="MesureType", value="Val") %>%
ggplot( aes(x=reorder(MesureType,Val, FUN = median), y=Val, fill=MesureType)) +
geom_violin() + xlab("\npopulation/year") + ylab("pi\n")+
scale_fill_manual(name = "Population",values=my_cols,guide=FALSE)+
theme_minimal()
#geom_jitter(height = 0, width = 0.1, alpha = 0.1)
p1
pop_names = c("PWS96","PWS07","PWS17","TB91","TB96","TB06","TB17","SS96","SS06","SS17","BC17","WA17","CA17")
pop <- "PWS91"
thetas <-read.delim(paste('C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/thetas/50kb/population_',pop,'_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5_theta.thetas50kbWindow.gz.pestPG',sep = ""))
#thetas$pi<- (thetas$tP*thetas$nSites)/10000
#thetas$pi<- thetas$tP/thetas$nSites
thetas <- thetas[thetas$nSites > 50,]
thetas$pi<- thetas$tP/50000
thetas <- thetas[c("pi")]
names(thetas)[names(thetas)=="pi"] <- pop
for (pop in pop_names){
thetas1 <-read.delim(paste('C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/thetas/50kb/population_',pop,'_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5_theta.thetas50kbWindow.gz.pestPG',sep = ""))
thetas1 <- thetas1[thetas1$nSites > 50,]
thetas1$pi<- thetas1$tP/50000
#thetas1$pi<- thetas1$tP/thetas1$nSites
thetas1[c("Chr","WinCenter","pi")]
thetas$pi <- thetas1$pi
names(thetas)[names(thetas)=="pi"] <- pop
}
my_cols <- c(grb,org,red,red,red,red,yel,yel,yel,blu,blu,blu,blu,lir)
thetas <- na.omit(thetas)
p1 <- thetas %>%
gather(key="MesureType", value="Val") %>%
ggplot( aes(x=reorder(MesureType,Val, FUN = median), y=Val, fill=MesureType)) +
geom_violin() + xlab("\npopulation/year") + ylab("pi\n")+
scale_fill_manual(name = "Population",values=my_cols,guide=FALSE)+
theme_minimal()
#geom_jitter(height = 0, width = 0.1, alpha = 0.1)
p1
png("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/figs/population_structure/pi_angsd.png", height = 5, width = 7, units = 'in', res = 600)
p1
dev.off()
my_cols <- c(grb,org,red,red,red,red,yel,yel,yel,blu,blu,blu,blu,lir)
thetas <- na.omit(thetas)
p1 <- thetas %>%
gather(key="MesureType", value="Val") %>%
ggplot( aes(x=reorder(MesureType,Val, FUN = median), y=Val, fill=MesureType)) +
geom_violin() + xlab("\npopulation/year") + ylab("nucleotide diversity\n")+
scale_fill_manual(name = "Population",values=my_cols,guide=FALSE)+
theme_minimal()
#geom_jitter(height = 0, width = 0.1, alpha = 0.1)
png("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/figs/population_structure/pi_angsd.png", height = 5, width = 7, units = 'in', res = 600)
p1
dev.off()
genes <- read.table("c_brontotheroides.all.renamed.putative_function.genes_only.reformated.known.final.saf", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
setwd("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files")
genes <- read.table("c_brontotheroides.all.renamed.putative_function.genes_only.reformated.known.final.saf", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
genes <- read.table("c_brontotheroides.all.renamed.putative_function.genes_only.reformated.known.final.saf", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
names(genes) <- c("GeneID","seqnames", "start",  "end", "strand")
genes$start <- genes$start -10000
genes$end <- genes$end +10000
genes <- genes %>% as_granges()
de <- read.table("de_genes_8dpf_design_crp_and_osp_mvp.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de_48 <- read.table("de_genes_48hpf_design_crp_and_osp_mvp_jeremy_genes.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de_17 <- read.table("de_genes_17_20pf_design_crp_and_lil_mvp_jeremy_genes.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de <-  de[which(de$padj <= 0.01),]
de <- de$Geneid
de_48 <-  de_48[which(de_48$padj <= 0.01),]
de_48 <- de_48$Geneid
de_17 <-  de_17[which(de_17$padj <= 0.01),]
de_17 <- de_17$Geneid
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(reticulate)
library(UpSetR)
library(plyranges)
library(venn)
library(DESeq2)
library(apeglm)
# color-blind friendly
# Wong, B. Points of view: Color blindness. Nat Methods (2011).
bla <- "#000000"
blu <- "#0072b2"
grb <- "#56b4e9"
lir <- "#cc79a7"
gre <- "#009e73"
red <- "#d55e00"
org <- "#e69f00"
yel <- "#f0e442"
gry<-  '#BBBBBB'
setwd("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files")
setwd("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files")
genes <- read.table("c_brontotheroides.all.renamed.putative_function.genes_only.reformated.known.final.saf", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
names(genes) <- c("GeneID","seqnames", "start",  "end", "strand")
genes$start <- genes$start -10000
genes$end <- genes$end +10000
genes <- genes %>% as_granges()
de <- read.table("de_genes_8dpf_design_crp_and_osp_mvp.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de_48 <- read.table("de_genes_48hpf_design_crp_and_osp_mvp_jeremy_genes.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de_17 <- read.table("de_genes_17_20pf_design_crp_and_lil_mvp_jeremy_genes.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de <-  de[which(de$padj <= 0.01),]
de <- de$Geneid
de_48 <-  de_48[which(de_48$padj <= 0.01),]
de_48 <- de_48$Geneid
de_17 <-  de_17[which(de_17$padj <= 0.01),]
de_17 <- de_17$Geneid
fixed <- read.table("fixed_snps_mvp.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
fixed$end <- fixed$POS +1
names(fixed) <- c("seqnames", "start", "all_v_m",  "all_v_p", "m_v_p","end")
fixed <- fixed %>% as_granges()
fixed <- join_overlap_intersect(fixed, genes) %>% as.data.frame()
num_snps <- fixed[fixed$GeneID %in% c(de,de_48,de_17), ]
fixed <- unique(fixed$GeneID)
genes <- read.table("~/data_files/c_brontotheroides.all.renamed.putative_function.genes_only.reformated.known.final.saf", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
genes <- read.table("/data_files/c_brontotheroides.all.renamed.putative_function.genes_only.reformated.known.final.saf", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
genes <- read.table("data_files/c_brontotheroides.all.renamed.putative_function.genes_only.reformated.known.final.saf", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
genes <- read.table("c_brontotheroides.all.renamed.putative_function.genes_only.reformated.known.final.saf", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
genes <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/c_brontotheroides.all.renamed.putative_function.genes_only.reformated.known.final.saf", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
names(genes) <- c("GeneID","seqnames", "start",  "end", "strand")
genes$start <- genes$start -10000
genes$end <- genes$end +10000
genes <- genes %>% as_granges()
de <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/de_genes_8dpf_design_crp_and_osp_mvp.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de_48 <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/de_genes_48hpf_design_crp_and_osp_mvp_jeremy_genes.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de_17 <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/de_genes_17_20pf_design_crp_and_lil_mvp_jeremy_genes.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de <-  de[which(de$padj <= 0.01),]
de <- de$Geneid
de_48 <-  de_48[which(de_48$padj <= 0.01),]
de_48 <- de_48$Geneid
de_17 <-  de_17[which(de_17$padj <= 0.01),]
de_17 <- de_17$Geneid
genes <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/c_brontotheroides.all.renamed.putative_function.genes_only.reformated.known.final.saf", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
names(genes) <- c("GeneID","seqnames", "start",  "end", "strand")
genes$start <- genes$start -10000
genes$end <- genes$end +10000
genes <- genes %>% as_granges()
de <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/de_genes_8dpf_design_crp_and_osp_mvp.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de_48 <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/de_genes_48hpf_design_crp_and_osp_mvp_jeremy_genes.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de_17 <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/de_genes_17_20pf_design_crp_and_lil_mvp_jeremy_genes.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de <-  de[which(de$padj <= 0.01),]
de <- de$Geneid
de_48 <-  de_48[which(de_48$padj <= 0.01),]
de_48 <- de_48$Geneid
de_17 <-  de_17[which(de_17$padj <= 0.01),]
de_17 <- de_17$Geneid
fixed <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/fixed_snps_mvp.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
fixed$end <- fixed$POS +1
names(fixed) <- c("seqnames", "start", "all_v_m",  "all_v_p", "m_v_p","end")
fixed <- fixed %>% as_granges()
fixed <- join_overlap_intersect(fixed, genes) %>% as.data.frame()
genes <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/c_brontotheroides.all.renamed.putative_function.genes_only.reformated.known.final.saf", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
names(genes) <- c("GeneID","seqnames", "start",  "end", "strand")
genes$start <- genes$start -10000
genes$end <- genes$end +10000
genes <- genes %>% as_granges()
de <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/de_genes_8dpf_design_crp_and_osp_mvp.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de_48 <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/de_genes_48hpf_design_crp_and_osp_mvp_jeremy_genes.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de_17 <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/de_genes_17_20pf_design_crp_and_lil_mvp_jeremy_genes.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
de <-  de[which(de$padj <= 0.01),]
de <- de$Geneid
de_48 <-  de_48[which(de_48$padj <= 0.01),]
de_48 <- de_48$Geneid
de_17 <-  de_17[which(de_17$padj <= 0.01),]
de_17 <- de_17$Geneid
# fst <- read.table("merged_fst_all_pupfish_filtered_snps_passed.Q20.MAF0.05.MAXMISS0.5.recode.txt", header = TRUE, stringsAsFactors = FALSE, # sep = "\t")
# quantile(fst$WEIR_AND_COCKERHAM_FST.2, 0.99)
# high_fst <- fst[which(fst$WEIR_AND_COCKERHAM_FST.2 > 0.72 & fst$WEIR_AND_COCKERHAM_FST.2 < 1),]
# high_fst$end <- high_fst$POS +1
# names(high_fst) <- c("seqnames", "start", "all_v_m",  "all_v_p", "m_v_p","end")
# high_fst <- high_fst %>% as_granges()
# high_fst <- join_overlap_intersect(high_fst, genes) %>% as.data.frame()
# num_snps <- high_fst[high_fst$GeneID %in% c(de,de_48,de_17), ]
# high_fst <- unique(high_fst$GeneID)
fixed <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/fixed_snps_mvp.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
fixed$end <- fixed$POS +1
names(fixed) <- c("seqnames", "start", "all_v_m",  "all_v_p", "m_v_p","end")
fixed <- fixed %>% as_granges()
fixed <- join_overlap_intersect(fixed, genes) %>% as.data.frame()
num_snps <- fixed[fixed$GeneID %in% c(de,de_48,de_17), ]
fixed <- unique(fixed$GeneID)
dxy <- read.csv("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/mxp_popgen_stats_corrected.csv", header = TRUE, stringsAsFactors = FALSE)
dxy <-  dxy[which(dxy$corr_dxy >= quantile(dxy$corr_dxy,0.90)[[1]]),]
names(dxy)[names(dxy)== "scaffold"] <- "seqnames"
dxy <- dxy %>% as_granges()
dxy <- join_overlap_intersect(dxy, genes) %>% as.data.frame()
dxy <- unique(dxy$GeneID)
popgen <- unique(intersect(high_fst,dxy))
sv <- read.table("C:/Users/jmcgirr/Documents/GitHub/fishfASE/markdown/data_files/shared_pvm_Svs.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t")
sv <- sv %>% as_granges()
sv <- join_overlap_intersect(sv, genes) %>% as.data.frame()
sv <- unique(sv$GeneID)
fixed_filter_de <- intersect(c(fixed,sv),c(de,de_48,de_17))
outlier_filter_de <- intersect(popgen,c(de,de_48,de_17))
#### fixed SNPs and deletions 1,10,20 kb ####
listInput <- list(de_48 = de_48 ,de = de,de_17 = de_17,fixed_snps = fixed, fixed_SVs = sv)
names(listInput) <- c("differentially expressed 2 dpf","differentially expressed 8 dpf","differentially expressed 20 dpf","near fixed SNP", "near fixed deletion")
upset(fromList(listInput), sets = rev(names(listInput)),order.by = "freq", point.size = 3.4, line.size = 1.2,
mainbar.y.label = "genes intersecting", sets.x.label = "genes", nsets = 6,
text.scale = c(2, 1.6, 1.5, 1.4, 2,1.6),keep.order = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(reticulate)
library(reshape2)
library(plyranges)
library(seqinr)
#BiocManager::install("seqinr")
# color-blind friendly
# Wong, B. Points of view: Color blindness. Nat Methods (2011).
bla <- "#000000"
blu <- "#0072b2"
grb <- "#56b4e9"
lir <- "#cc79a7"
gre <- "#009e73"
red <- "#d55e00"
org <- "#e69f00"
yel <- "#f0e442"
gry<-  '#BBBBBB'
import moments
reticulate::repl_python()
import moments
import math
fs = moments.Spectrum([88113,1222,132,445,285,176,41,20,73,276,192,68,50,23,3,2,47,50,0,0,362])
with open('C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS07_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs') as data:
sfs = data.read().split()
sfs = sfs[math.ceil(((len(sfs)/2)*0.05)+2):]
sfs = [float(i) for i in sfs]
sfs = [round(num) for num in sfs]
sfs = [0] + sfs
fs = moments.Spectrum(sfs)
thetaW = fs.Watterson_theta()
print(thetaW)
#print(math.ceil(((len(sfs)/2)*0.05)+1))
nSites = sum(sfs[1:-1])
ne = thetaW / 2.0e-9 / nSites / 4
print(ne)
quit
sfs<-(scan(  'C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/folded/population_BC17_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs'))
f = open("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS91_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs", "r")
print(f)
from numpy import loadtxt
lines = loadtxt("filename.dat", comments="#", delimiter=",", unpack=False)
lines = text_file.read("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS91_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs").split(' ')
import moments
import math
fs = moments.Spectrum([88113,1222,132,445,285,176,41,20,73,276,192,68,50,23,3,2,47,50,0,0,362])
with open('C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS07_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs') as data:
sfs = data.read().split()
sfs = sfs[math.ceil(((len(sfs)/2)*0.05)+2):]
sfs = [float(i) for i in sfs]
sfs = [round(num) for num in sfs]
sfs = [0] + sfs
fs = moments.Spectrum(sfs)
thetaW = fs.Watterson_theta()
print(thetaW)
#print(math.ceil(((len(sfs)/2)*0.05)+1))
nSites = sum(sfs[1:-1])
ne = thetaW / 2.0e-9 / nSites / 4
print(ne)
#print(nSites)
#,results='hide'}
import moments
import math
fs = moments.Spectrum([88113,1222,132,445,285,176,41,20,73,276,192,68,50,23,3,2,47,50,0,0,362])
with open('C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS07_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs') as data:
sfs = data.read().split()
sfs = sfs[math.ceil(((len(sfs)/2)*0.05)+2):]
sfs = [float(i) for i in sfs]
sfs = [round(num) for num in sfs]
sfs = [0] + sfs
fs = moments.Spectrum(sfs)
thetaW = fs.Watterson_theta()
print(thetaW)
#print(math.ceil(((len(sfs)/2)*0.05)+1))
nSites = sum(sfs[1:-1])
ne = thetaW / 2.0e-9 / nSites / 4
print(ne)
#print(nSites)
#f = open("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS91_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs", "r")
#print(f)
#from numpy import loadtxt
#lines = loadtxt("filename.dat", comments="#", delimiter=",", unpack=False)
#lines = text_file.read("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS91_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs").split(' ')
#D = fs . Tajima_D ()
#pi = fs.pi()
#thetaW = fs.Watterson_theta()
import moments
import math
fs = moments.Spectrum([88113,1222,132,445,285,176,41,20,73,276,192,68,50,23,3,2,47,50,0,0,362])
with open('C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS07_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs') as data:
sfs = data.read().split()
sfs = sfs[math.ceil(((len(sfs)/2)*0.05)+2):]
sfs = [float(i) for i in sfs]
sfs = [round(num) for num in sfs]
sfs = [0] + sfs
fs = moments.Spectrum(sfs)
thetaW = fs.Watterson_theta()
print(thetaW)
#print(math.ceil(((len(sfs)/2)*0.05)+1))
nSites = sum(sfs[1:-1])
ne = thetaW / 2.0e-9 / nSites / 4
print(ne)
pi = fs.pi()
print(pi)
print(nSites)
print(pi/nsites)
#print(f)
#print(f)
#,results='hide'}
import moments
import math
fs = moments.Spectrum([88113,1222,132,445,285,176,41,20,73,276,192,68,50,23,3,2,47,50,0,0,362])
with open('C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS07_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs') as data:
sfs = data.read().split()
sfs = sfs[math.ceil(((len(sfs)/2)*0.05)+2):]
sfs = [float(i) for i in sfs]
sfs = [round(num) for num in sfs]
sfs = [0] + sfs
fs = moments.Spectrum(sfs)
thetaW = fs.Watterson_theta()
print(thetaW)
#print(math.ceil(((len(sfs)/2)*0.05)+1))
nSites = sum(sfs[1:-1])
ne = thetaW / 2.0e-9 / nSites / 4
print(ne)
pi = fs.pi()
print(pi)
print(nSites)
print(pi/nsites)
#f = open("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS91_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs", "r")
#print(f)
#from numpy import loadtxt
#lines = loadtxt("filename.dat", comments="#", delimiter=",", unpack=False)
#lines = text_file.read("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS91_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs").split(' ')
#D = fs . Tajima_D ()
#pi = fs.pi()
#thetaW = fs.Watterson_theta()
#,results='hide'}
import moments
import math
fs = moments.Spectrum([88113,1222,132,445,285,176,41,20,73,276,192,68,50,23,3,2,47,50,0,0,362])
with open('C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS07_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs') as data:
sfs = data.read().split()
sfs = sfs[math.ceil(((len(sfs)/2)*0.05)+2):]
sfs = [float(i) for i in sfs]
sfs = [round(num) for num in sfs]
sfs = [0] + sfs
fs = moments.Spectrum(sfs)
thetaW = fs.Watterson_theta()
print(thetaW)
#print(math.ceil(((len(sfs)/2)*0.05)+1))
nSites = sum(sfs[1:-1])
ne = thetaW / 2.0e-9 / nSites / 4
print(ne)
pi = fs.pi()
print(pi)
print(nSites)
print(pi/nSites)
#f = open("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS91_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs", "r")
#print(f)
#from numpy import loadtxt
#lines = loadtxt("filename.dat", comments="#", delimiter=",", unpack=False)
#lines = text_file.read("C:/Users/jmcgirr/Documents/Whitehead_Lab/ph/angsd/SFS/unfolded/population_PWS91_ph_filtered_snps_minDP600_maxDP2000_maf0.05_minQ20_minMQ30_maxmiss0.5.sfs").split(' ')
#D = fs . Tajima_D ()
#pi = fs.pi()
#thetaW = fs.Watterson_theta()
